vagrant@tfbuntu:~/GCP8-pet-lab/training/tftraining_v0$ terraform apply -auto-approve -input=false

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # google_compute_autoscaler.pc_mig_autoscaler will be created
  + resource "google_compute_autoscaler" "pc_mig_autoscaler" {
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + name               = "pc-mig-autoscaler"
      + project            = "az-537298"
      + self_link          = (known after apply)
      + target             = (known after apply)
      + zone               = "us-central1-c"

      + autoscaling_policy {
          + cooldown_period = 60
          + max_replicas    = 4
          + min_replicas    = 2
          + mode            = "ON"

          + cpu_utilization {
              + predictive_method = "NONE"
              + target            = 0.8
            }
        }
    }

  # google_compute_autoscaler.pc_mig_autoscaler_schedule will be created
  + resource "google_compute_autoscaler" "pc_mig_autoscaler_schedule" {
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + name               = "pc-mig-autoscaler-schedule"
      + project            = "az-537298"
      + self_link          = (known after apply)
      + target             = (known after apply)
      + zone               = "us-central1-c"

      + autoscaling_policy {
          + cooldown_period = 60
          + max_replicas    = 4
          + min_replicas    = 2
          + mode            = "ON"

          + cpu_utilization (known after apply)

          + scale_in_control {
              + time_window_sec = 60

              + max_scaled_in_replicas {
                  + fixed = 4
                }
            }
        }
    }

  # google_compute_backend_service.petclinic_backend will be created
  + resource "google_compute_backend_service" "petclinic_backend" {
      + connection_draining_timeout_sec = 300
      + creation_timestamp              = (known after apply)
      + fingerprint                     = (known after apply)
      + generated_id                    = (known after apply)
      + health_checks                   = (known after apply)
      + id                              = (known after apply)
      + load_balancing_scheme           = "EXTERNAL"
      + name                            = "petclinic-backend"
      + port_name                       = (known after apply)
      + project                         = "az-537298"
      + protocol                        = "HTTP"
      + self_link                       = (known after apply)
      + session_affinity                = (known after apply)
      + timeout_sec                     = (known after apply)

      + cdn_policy (known after apply)

      + iap (known after apply)

      + log_config (known after apply)
    }

  # google_compute_global_forwarding_rule.petclinic_forwarding_rule will be created
  + resource "google_compute_global_forwarding_rule" "petclinic_forwarding_rule" {
      + base_forwarding_rule  = (known after apply)
      + effective_labels      = (known after apply)
      + id                    = (known after apply)
      + ip_address            = (known after apply)
      + ip_protocol           = (known after apply)
      + label_fingerprint     = (known after apply)
      + load_balancing_scheme = "EXTERNAL"
      + name                  = "petclinic-forwarding-rule"
      + network               = (known after apply)
      + port_range            = "80"
      + project               = "az-537298"
      + psc_connection_id     = (known after apply)
      + psc_connection_status = (known after apply)
      + self_link             = (known after apply)
      + subnetwork            = (known after apply)
      + target                = (known after apply)
      + terraform_labels      = (known after apply)

      + service_directory_registrations (known after apply)
    }

  # google_compute_health_check.petclinic_health_check will be created
  + resource "google_compute_health_check" "petclinic_health_check" {
      + check_interval_sec  = 30
      + creation_timestamp  = (known after apply)
      + healthy_threshold   = 2
      + id                  = (known after apply)
      + name                = "petclinic-health-check"
      + project             = "az-537298"
      + self_link           = (known after apply)
      + timeout_sec         = 10
      + type                = (known after apply)
      + unhealthy_threshold = 2

      + http_health_check {
          + port         = 8080
          + proxy_header = "NONE"
          + request_path = "/health"
        }

      + log_config (known after apply)
    }

  # google_compute_instance_group_manager.pc_mig will be created
  + resource "google_compute_instance_group_manager" "pc_mig" {
      + base_instance_name             = "petclinic-server"
      + creation_timestamp             = (known after apply)
      + fingerprint                    = (known after apply)
      + id                             = (known after apply)
      + instance_group                 = (known after apply)
      + list_managed_instances_results = "PAGELESS"
      + name                           = "pc-mig"
      + operation                      = (known after apply)
      + project                        = "az-537298"
      + self_link                      = (known after apply)
      + status                         = (known after apply)
      + target_size                    = 2
      + wait_for_instances             = false
      + wait_for_instances_status      = "STABLE"
      + zone                           = "us-central1-c"

      + instance_lifecycle_policy (known after apply)

      + update_policy {
          + max_surge_fixed       = (known after apply)
          + max_unavailable_fixed = (known after apply)
          + minimal_action        = "RESTART"
          + type                  = "PROACTIVE"
        }

      + version {
          + instance_template = "projects/az-537298/regions/us-central1/instanceTemplates/petclinic-template"
          + name              = "petclinic-serverv"
        }
    }

  # google_compute_network.vpc will be created
  + resource "google_compute_network" "vpc" {
      + auto_create_subnetworks                   = false
      + delete_default_routes_on_create           = false
      + gateway_ipv4                              = (known after apply)
      + id                                        = (known after apply)
      + internal_ipv6_range                       = (known after apply)
      + mtu                                       = (known after apply)
      + name                                      = "petclinic-vpc"
      + network_firewall_policy_enforcement_order = "AFTER_CLASSIC_FIREWALL"
      + numeric_id                                = (known after apply)
      + project                                   = "az-537298"
      + routing_mode                              = (known after apply)
      + self_link                                 = (known after apply)
    }

  # google_compute_router.pc_router will be created
  + resource "google_compute_router" "pc_router" {
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + name               = "pc-router"
      + network            = "petclinic-vpc"
      + project            = "az-537298"
      + region             = "us-central1"
      + self_link          = (known after apply)

      + bgp {
          + advertise_mode     = "DEFAULT"
          + asn                = 65001
          + identifier_range   = (known after apply)
          + keepalive_interval = 20
        }
    }

  # google_compute_router_nat.pc_nat_gateway will be created
  + resource "google_compute_router_nat" "pc_nat_gateway" {
      + auto_network_tier                   = (known after apply)
      + drain_nat_ips                       = (known after apply)
      + enable_dynamic_port_allocation      = (known after apply)
      + enable_endpoint_independent_mapping = (known after apply)
      + endpoint_types                      = (known after apply)
      + icmp_idle_timeout_sec               = 30
      + id                                  = (known after apply)
      + min_ports_per_vm                    = (known after apply)
      + name                                = "pc-nat-gateway"
      + nat_ip_allocate_option              = "AUTO_ONLY"
      + nat_ips                             = (known after apply)
      + project                             = "az-537298"
      + region                              = "us-central1"
      + router                              = "pc-router"
      + source_subnetwork_ip_ranges_to_nat  = "ALL_SUBNETWORKS_ALL_IP_RANGES"
      + tcp_established_idle_timeout_sec    = 1200
      + tcp_time_wait_timeout_sec           = 120
      + tcp_transitory_idle_timeout_sec     = 30
      + udp_idle_timeout_sec                = 30

      + log_config {
          + enable = false
          + filter = "ERRORS_ONLY"
        }
    }

  # google_compute_subnetwork.pc_subnet will be created
  + resource "google_compute_subnetwork" "pc_subnet" {
      + creation_timestamp         = (known after apply)
      + external_ipv6_prefix       = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + internal_ipv6_prefix       = (known after apply)
      + ip_cidr_range              = "10.0.1.0/24"
      + ipv6_cidr_range            = (known after apply)
      + name                       = "pc-subnet"
      + network                    = (known after apply)
      + private_ip_google_access   = (known after apply)
      + private_ipv6_google_access = (known after apply)
      + project                    = "az-537298"
      + purpose                    = (known after apply)
      + region                     = "us-central1"
      + self_link                  = (known after apply)
      + stack_type                 = (known after apply)

      + secondary_ip_range (known after apply)
    }

  # google_compute_subnetwork.sql_subnet will be created
  + resource "google_compute_subnetwork" "sql_subnet" {
      + creation_timestamp         = (known after apply)
      + external_ipv6_prefix       = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + internal_ipv6_prefix       = (known after apply)
      + ip_cidr_range              = "10.0.2.0/24"
      + ipv6_cidr_range            = (known after apply)
      + name                       = "mysql-subnet"
      + network                    = (known after apply)
      + private_ip_google_access   = (known after apply)
      + private_ipv6_google_access = (known after apply)
      + project                    = "az-537298"
      + purpose                    = (known after apply)
      + region                     = "us-central1"
      + self_link                  = (known after apply)
      + stack_type                 = (known after apply)

      + secondary_ip_range (known after apply)
    }

  # google_compute_target_http_proxy.petclinic_http_proxy will be created
  + resource "google_compute_target_http_proxy" "petclinic_http_proxy" {
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + name               = "petclinic-http-proxy"
      + project            = "az-537298"
      + proxy_bind         = (known after apply)
      + proxy_id           = (known after apply)
      + self_link          = (known after apply)
      + url_map            = (known after apply)
    }

  # google_compute_url_map.petclinic_url_map will be created
  + resource "google_compute_url_map" "petclinic_url_map" {
      + creation_timestamp = (known after apply)
      + default_service    = (known after apply)
      + fingerprint        = (known after apply)
      + id                 = (known after apply)
      + map_id             = (known after apply)
      + name               = "petclinic-url-map"
      + project            = "az-537298"
      + self_link          = (known after apply)
    }

  # module.firewall.google_compute_firewall.allow_mysql_from_petclinic will be created
  + resource "google_compute_firewall" "allow_mysql_from_petclinic" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "allow-mysql-from-petclinic"
      + network            = (known after apply)
      + priority           = 1000
      + project            = "az-537298"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "10.0.1.0/24",
        ]
      + target_tags        = [
          + "mysqlserver-firewall",
        ]

      + allow {
          + ports    = [
              + "3306",
            ]
          + protocol = "tcp"
        }
    }

  # module.firewall.google_compute_firewall.allow_petclinic_from_internet will be created
  + resource "google_compute_firewall" "allow_petclinic_from_internet" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "allow-petclinic-from-internet"
      + network            = (known after apply)
      + priority           = 1000
      + project            = "az-537298"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]
      + target_tags        = [
          + "petclinic-firewall",
        ]

      + allow {
          + ports    = [
              + "8080",
            ]
          + protocol = "tcp"
        }
    }

  # module.firewall.google_compute_firewall.allow_ssh_from_internet will be created
  + resource "google_compute_firewall" "allow_ssh_from_internet" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "allow-ssh-from-internet"
      + network            = (known after apply)
      + priority           = 1000
      + project            = "az-537298"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]
      + target_tags        = [
          + "mysqlserver-firewall",
          + "petclinic-firewall",
        ]

      + allow {
          + ports    = [
              + "22",
            ]
          + protocol = "tcp"
        }
      + allow {
          + ports    = []
          + protocol = "icmp"
        }
    }

Plan: 16 to add, 0 to change, 0 to destroy.
google_compute_network.vpc: Creating...
google_compute_router.pc_router: Creating...
google_compute_instance_group_manager.pc_mig: Creating...
google_compute_health_check.petclinic_health_check: Creating...
google_compute_network.vpc: Still creating... [10s elapsed]
google_compute_health_check.petclinic_health_check: Still creating... [10s elapsed]
google_compute_health_check.petclinic_health_check: Creation complete after 12s [id=projects/az-537298/global/healthChecks/petclinic-health-check]
google_compute_backend_service.petclinic_backend: Creating...
google_compute_network.vpc: Still creating... [20s elapsed]
google_compute_backend_service.petclinic_backend: Still creating... [10s elapsed]
google_compute_network.vpc: Creation complete after 22s [id=projects/az-537298/global/networks/petclinic-vpc]
google_compute_subnetwork.pc_subnet: Creating...
google_compute_subnetwork.sql_subnet: Creating...
module.firewall.google_compute_firewall.allow_petclinic_from_internet: Creating...
module.firewall.google_compute_firewall.allow_mysql_from_petclinic: Creating...
module.firewall.google_compute_firewall.allow_ssh_from_internet: Creating...
google_compute_backend_service.petclinic_backend: Still creating... [20s elapsed]
google_compute_subnetwork.pc_subnet: Still creating... [10s elapsed]
google_compute_subnetwork.sql_subnet: Still creating... [10s elapsed]
module.firewall.google_compute_firewall.allow_petclinic_from_internet: Still creating... [10s elapsed]
module.firewall.google_compute_firewall.allow_mysql_from_petclinic: Still creating... [10s elapsed]
module.firewall.google_compute_firewall.allow_ssh_from_internet: Still creating... [10s elapsed]
google_compute_backend_service.petclinic_backend: Creation complete after 22s [id=projects/az-537298/global/backendServices/petclinic-backend]
google_compute_url_map.petclinic_url_map: Creating...
module.firewall.google_compute_firewall.allow_ssh_from_internet: Creation complete after 11s [id=projects/az-537298/global/firewalls/allow-ssh-from-internet]
module.firewall.google_compute_firewall.allow_petclinic_from_internet: Creation complete after 11s [id=projects/az-537298/global/firewalls/allow-petclinic-from-internet]
module.firewall.google_compute_firewall.allow_mysql_from_petclinic: Creation complete after 11s [id=projects/az-537298/global/firewalls/allow-mysql-from-petclinic]
google_compute_subnetwork.sql_subnet: Creation complete after 13s [id=projects/az-537298/regions/us-central1/subnetworks/mysql-subnet]
google_compute_subnetwork.pc_subnet: Creation complete after 13s [id=projects/az-537298/regions/us-central1/subnetworks/pc-subnet]
google_compute_url_map.petclinic_url_map: Still creating... [10s elapsed]
google_compute_url_map.petclinic_url_map: Creation complete after 12s [id=projects/az-537298/global/urlMaps/petclinic-url-map]
google_compute_target_http_proxy.petclinic_http_proxy: Creating...
google_compute_target_http_proxy.petclinic_http_proxy: Still creating... [10s elapsed]
google_compute_target_http_proxy.petclinic_http_proxy: Creation complete after 12s [id=projects/az-537298/global/targetHttpProxies/petclinic-http-proxy]
google_compute_global_forwarding_rule.petclinic_forwarding_rule: Creating...
google_compute_global_forwarding_rule.petclinic_forwarding_rule: Still creating... [10s elapsed]
google_compute_global_forwarding_rule.petclinic_forwarding_rule: Still creating... [20s elapsed]
google_compute_global_forwarding_rule.petclinic_forwarding_rule: Creation complete after 22s [id=projects/az-537298/global/forwardingRules/petclinic-forwarding-rule]
╷
│ Error: Error creating Router: googleapi: Error 404: The resource 'projects/az-537298/global/networks/petclinic-vpc' was not found, notFound
│ 
│   with google_compute_router.pc_router,
│   on main.tf line 37, in resource "google_compute_router" "pc_router":
│   37: resource "google_compute_router" "pc_router" {
│ 
╵
╷
│ Error: Error creating InstanceGroupManager: googleapi: Error 400: Invalid value for field 'resource.updatePolicy.maxUnavailable': '{  "fixed": 0}'. maxUnavailable must be greater than 0 when minimal action is set to REFRESH or RESTART, invalid
│ 
│   with google_compute_instance_group_manager.pc_mig,
│   on main.tf line 94, in resource "google_compute_instance_group_manager" "pc_mig":
│   94: resource "google_compute_instance_group_manager" "pc_mig" {
│ 
╵

vagrant@tfbuntu:~/GCP8-pet-lab/training/tftraining_v0$ terraform apply -auto-approve -input=false

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # google_compute_autoscaler.pc_mig_autoscaler will be created
  + resource "google_compute_autoscaler" "pc_mig_autoscaler" {
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + name               = "pc-mig-autoscaler"
      + project            = "az-537298"
      + self_link          = (known after apply)
      + target             = (known after apply)
      + zone               = "us-central1-c"

      + autoscaling_policy {
          + cooldown_period = 60
          + max_replicas    = 4
          + min_replicas    = 2
          + mode            = "ON"

          + cpu_utilization {
              + predictive_method = "NONE"
              + target            = 0.8
            }
        }
    }

  # google_compute_autoscaler.pc_mig_autoscaler_schedule will be created
  + resource "google_compute_autoscaler" "pc_mig_autoscaler_schedule" {
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + name               = "pc-mig-autoscaler-schedule"
      + project            = "az-537298"
      + self_link          = (known after apply)
      + target             = (known after apply)
      + zone               = "us-central1-c"

      + autoscaling_policy {
          + cooldown_period = 60
          + max_replicas    = 4
          + min_replicas    = 2
          + mode            = "ON"

          + cpu_utilization (known after apply)

          + scale_in_control {
              + time_window_sec = 60

              + max_scaled_in_replicas {
                  + fixed = 4
                }
            }
        }
    }

  # google_compute_backend_service.petclinic_backend will be created
  + resource "google_compute_backend_service" "petclinic_backend" {
      + connection_draining_timeout_sec = 300
      + creation_timestamp              = (known after apply)
      + fingerprint                     = (known after apply)
      + generated_id                    = (known after apply)
      + health_checks                   = (known after apply)
      + id                              = (known after apply)
      + load_balancing_scheme           = "EXTERNAL"
      + name                            = "petclinic-backend"
      + port_name                       = (known after apply)
      + project                         = "az-537298"
      + protocol                        = "HTTP"
      + self_link                       = (known after apply)
      + session_affinity                = (known after apply)
      + timeout_sec                     = (known after apply)

      + cdn_policy (known after apply)

      + iap (known after apply)

      + log_config (known after apply)
    }

  # google_compute_global_forwarding_rule.petclinic_forwarding_rule will be created
  + resource "google_compute_global_forwarding_rule" "petclinic_forwarding_rule" {
      + base_forwarding_rule  = (known after apply)
      + effective_labels      = (known after apply)
      + id                    = (known after apply)
      + ip_address            = (known after apply)
      + ip_protocol           = (known after apply)
      + label_fingerprint     = (known after apply)
      + load_balancing_scheme = "EXTERNAL"
      + name                  = "petclinic-forwarding-rule"
      + network               = (known after apply)
      + port_range            = "80"
      + project               = "az-537298"
      + psc_connection_id     = (known after apply)
      + psc_connection_status = (known after apply)
      + self_link             = (known after apply)
      + subnetwork            = (known after apply)
      + target                = (known after apply)
      + terraform_labels      = (known after apply)

      + service_directory_registrations (known after apply)
    }

  # google_compute_health_check.petclinic_health_check will be created
  + resource "google_compute_health_check" "petclinic_health_check" {
      + check_interval_sec  = 30
      + creation_timestamp  = (known after apply)
      + healthy_threshold   = 2
      + id                  = (known after apply)
      + name                = "petclinic-health-check"
      + project             = "az-537298"
      + self_link           = (known after apply)
      + timeout_sec         = 10
      + type                = (known after apply)
      + unhealthy_threshold = 2

      + http_health_check {
          + port         = 8080
          + proxy_header = "NONE"
          + request_path = "/health"
        }

      + log_config (known after apply)
    }

  # google_compute_instance_group_manager.pc_mig will be created
  + resource "google_compute_instance_group_manager" "pc_mig" {
      + base_instance_name             = "petclinic-server"
      + creation_timestamp             = (known after apply)
      + fingerprint                    = (known after apply)
      + id                             = (known after apply)
      + instance_group                 = (known after apply)
      + list_managed_instances_results = "PAGELESS"
      + name                           = "pc-mig"
      + operation                      = (known after apply)
      + project                        = "az-537298"
      + self_link                      = (known after apply)
      + status                         = (known after apply)
      + target_size                    = 2
      + wait_for_instances             = false
      + wait_for_instances_status      = "STABLE"
      + zone                           = "us-central1-c"

      + instance_lifecycle_policy (known after apply)

      + update_policy {
          + max_surge_fixed       = (known after apply)
          + max_unavailable_fixed = (known after apply)
          + minimal_action        = "RESTART"
          + type                  = "PROACTIVE"
        }

      + version {
          + instance_template = "projects/az-537298/regions/us-central1/instanceTemplates/petclinic-template"
          + name              = "petclinic-serverv"
        }
    }

  # google_compute_network.vpc will be created
  + resource "google_compute_network" "vpc" {
      + auto_create_subnetworks                   = false
      + delete_default_routes_on_create           = false
      + gateway_ipv4                              = (known after apply)
      + id                                        = (known after apply)
      + internal_ipv6_range                       = (known after apply)
      + mtu                                       = (known after apply)
      + name                                      = "petclinic-vpc"
      + network_firewall_policy_enforcement_order = "AFTER_CLASSIC_FIREWALL"
      + numeric_id                                = (known after apply)
      + project                                   = "az-537298"
      + routing_mode                              = (known after apply)
      + self_link                                 = (known after apply)
    }

  # google_compute_router.pc_router will be created
  + resource "google_compute_router" "pc_router" {
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + name               = "pc-router"
      + network            = "petclinic-vpc"
      + project            = "az-537298"
      + region             = "us-central1"
      + self_link          = (known after apply)

      + bgp {
          + advertise_mode     = "DEFAULT"
          + asn                = 65001
          + identifier_range   = (known after apply)
          + keepalive_interval = 20
        }
    }

  # google_compute_router_nat.pc_nat_gateway will be created
  + resource "google_compute_router_nat" "pc_nat_gateway" {
      + auto_network_tier                   = (known after apply)
      + drain_nat_ips                       = (known after apply)
      + enable_dynamic_port_allocation      = (known after apply)
      + enable_endpoint_independent_mapping = (known after apply)
      + endpoint_types                      = (known after apply)
      + icmp_idle_timeout_sec               = 30
      + id                                  = (known after apply)
      + min_ports_per_vm                    = (known after apply)
      + name                                = "pc-nat-gateway"
      + nat_ip_allocate_option              = "AUTO_ONLY"
      + nat_ips                             = (known after apply)
      + project                             = "az-537298"
      + region                              = "us-central1"
      + router                              = "pc-router"
      + source_subnetwork_ip_ranges_to_nat  = "ALL_SUBNETWORKS_ALL_IP_RANGES"
      + tcp_established_idle_timeout_sec    = 1200
      + tcp_time_wait_timeout_sec           = 120
      + tcp_transitory_idle_timeout_sec     = 30
      + udp_idle_timeout_sec                = 30

      + log_config {
          + enable = false
          + filter = "ERRORS_ONLY"
        }
    }

  # google_compute_subnetwork.pc_subnet will be created
  + resource "google_compute_subnetwork" "pc_subnet" {
      + creation_timestamp         = (known after apply)
      + external_ipv6_prefix       = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + internal_ipv6_prefix       = (known after apply)
      + ip_cidr_range              = "10.0.1.0/24"
      + ipv6_cidr_range            = (known after apply)
      + name                       = "pc-subnet"
      + network                    = (known after apply)
      + private_ip_google_access   = (known after apply)
      + private_ipv6_google_access = (known after apply)
      + project                    = "az-537298"
      + purpose                    = (known after apply)
      + region                     = "us-central1"
      + self_link                  = (known after apply)
      + stack_type                 = (known after apply)

      + secondary_ip_range (known after apply)
    }

  # google_compute_subnetwork.sql_subnet will be created
  + resource "google_compute_subnetwork" "sql_subnet" {
      + creation_timestamp         = (known after apply)
      + external_ipv6_prefix       = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + internal_ipv6_prefix       = (known after apply)
      + ip_cidr_range              = "10.0.2.0/24"
      + ipv6_cidr_range            = (known after apply)
      + name                       = "mysql-subnet"
      + network                    = (known after apply)
      + private_ip_google_access   = (known after apply)
      + private_ipv6_google_access = (known after apply)
      + project                    = "az-537298"
      + purpose                    = (known after apply)
      + region                     = "us-central1"
      + self_link                  = (known after apply)
      + stack_type                 = (known after apply)

      + secondary_ip_range (known after apply)
    }

  # google_compute_target_http_proxy.petclinic_http_proxy will be created
  + resource "google_compute_target_http_proxy" "petclinic_http_proxy" {
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + name               = "petclinic-http-proxy"
      + project            = "az-537298"
      + proxy_bind         = (known after apply)
      + proxy_id           = (known after apply)
      + self_link          = (known after apply)
      + url_map            = (known after apply)
    }

  # google_compute_url_map.petclinic_url_map will be created
  + resource "google_compute_url_map" "petclinic_url_map" {
      + creation_timestamp = (known after apply)
      + default_service    = (known after apply)
      + fingerprint        = (known after apply)
      + id                 = (known after apply)
      + map_id             = (known after apply)
      + name               = "petclinic-url-map"
      + project            = "az-537298"
      + self_link          = (known after apply)
    }

  # module.firewall.google_compute_firewall.allow_mysql_from_petclinic will be created
  + resource "google_compute_firewall" "allow_mysql_from_petclinic" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "allow-mysql-from-petclinic"
      + network            = (known after apply)
      + priority           = 1000
      + project            = "az-537298"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "10.0.1.0/24",
        ]
      + target_tags        = [
          + "mysqlserver-firewall",
        ]

      + allow {
          + ports    = [
              + "3306",
            ]
          + protocol = "tcp"
        }
    }

  # module.firewall.google_compute_firewall.allow_petclinic_from_internet will be created
  + resource "google_compute_firewall" "allow_petclinic_from_internet" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "allow-petclinic-from-internet"
      + network            = (known after apply)
      + priority           = 1000
      + project            = "az-537298"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]
      + target_tags        = [
          + "petclinic-firewall",
        ]

      + allow {
          + ports    = [
              + "8080",
            ]
          + protocol = "tcp"
        }
    }

  # module.firewall.google_compute_firewall.allow_ssh_from_internet will be created
  + resource "google_compute_firewall" "allow_ssh_from_internet" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "allow-ssh-from-internet"
      + network            = (known after apply)
      + priority           = 1000
      + project            = "az-537298"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]
      + target_tags        = [
          + "mysqlserver-firewall",
          + "petclinic-firewall",
        ]

      + allow {
          + ports    = [
              + "22",
            ]
          + protocol = "tcp"
        }
      + allow {
          + ports    = []
          + protocol = "icmp"
        }
    }

Plan: 16 to add, 0 to change, 0 to destroy.
google_compute_network.vpc: Creating...
google_compute_router.pc_router: Creating...
google_compute_instance_group_manager.pc_mig: Creating...
google_compute_health_check.petclinic_health_check: Creating...
google_compute_network.vpc: Still creating... [10s elapsed]
google_compute_health_check.petclinic_health_check: Still creating... [10s elapsed]
google_compute_health_check.petclinic_health_check: Creation complete after 12s [id=projects/az-537298/global/healthChecks/petclinic-health-check]
google_compute_backend_service.petclinic_backend: Creating...
google_compute_network.vpc: Still creating... [20s elapsed]
google_compute_backend_service.petclinic_backend: Still creating... [10s elapsed]
google_compute_network.vpc: Creation complete after 22s [id=projects/az-537298/global/networks/petclinic-vpc]
google_compute_subnetwork.pc_subnet: Creating...
google_compute_subnetwork.sql_subnet: Creating...
module.firewall.google_compute_firewall.allow_petclinic_from_internet: Creating...
module.firewall.google_compute_firewall.allow_mysql_from_petclinic: Creating...
module.firewall.google_compute_firewall.allow_ssh_from_internet: Creating...
google_compute_backend_service.petclinic_backend: Still creating... [20s elapsed]
google_compute_subnetwork.pc_subnet: Still creating... [10s elapsed]
google_compute_subnetwork.sql_subnet: Still creating... [10s elapsed]
module.firewall.google_compute_firewall.allow_petclinic_from_internet: Still creating... [10s elapsed]
module.firewall.google_compute_firewall.allow_mysql_from_petclinic: Still creating... [10s elapsed]
module.firewall.google_compute_firewall.allow_ssh_from_internet: Still creating... [10s elapsed]
google_compute_backend_service.petclinic_backend: Creation complete after 22s [id=projects/az-537298/global/backendServices/petclinic-backend]
google_compute_url_map.petclinic_url_map: Creating...
module.firewall.google_compute_firewall.allow_ssh_from_internet: Creation complete after 11s [id=projects/az-537298/global/firewalls/allow-ssh-from-internet]
module.firewall.google_compute_firewall.allow_petclinic_from_internet: Creation complete after 11s [id=projects/az-537298/global/firewalls/allow-petclinic-from-internet]
module.firewall.google_compute_firewall.allow_mysql_from_petclinic: Creation complete after 11s [id=projects/az-537298/global/firewalls/allow-mysql-from-petclinic]
google_compute_subnetwork.sql_subnet: Creation complete after 13s [id=projects/az-537298/regions/us-central1/subnetworks/mysql-subnet]
google_compute_subnetwork.pc_subnet: Creation complete after 13s [id=projects/az-537298/regions/us-central1/subnetworks/pc-subnet]
google_compute_url_map.petclinic_url_map: Still creating... [10s elapsed]
google_compute_url_map.petclinic_url_map: Creation complete after 12s [id=projects/az-537298/global/urlMaps/petclinic-url-map]
google_compute_target_http_proxy.petclinic_http_proxy: Creating...
google_compute_target_http_proxy.petclinic_http_proxy: Still creating... [10s elapsed]
google_compute_target_http_proxy.petclinic_http_proxy: Creation complete after 12s [id=projects/az-537298/global/targetHttpProxies/petclinic-http-proxy]
google_compute_global_forwarding_rule.petclinic_forwarding_rule: Creating...
google_compute_global_forwarding_rule.petclinic_forwarding_rule: Still creating... [10s elapsed]
google_compute_global_forwarding_rule.petclinic_forwarding_rule: Still creating... [20s elapsed]
google_compute_global_forwarding_rule.petclinic_forwarding_rule: Creation complete after 22s [id=projects/az-537298/global/forwardingRules/petclinic-forwarding-rule]
╷
│ Error: Error creating Router: googleapi: Error 404: The resource 'projects/az-537298/global/networks/petclinic-vpc' was not found, notFound
│ 
│   with google_compute_router.pc_router,
│   on main.tf line 37, in resource "google_compute_router" "pc_router":
│   37: resource "google_compute_router" "pc_router" {
│ 
╵
╷
│ Error: Error creating InstanceGroupManager: googleapi: Error 400: Invalid value for field 'resource.updatePolicy.maxUnavailable': '{  "fixed": 0}'. maxUnavailable must be greater than 0 when minimal action is set to REFRESH or RESTART, invalid
│ 
│   with google_compute_instance_group_manager.pc_mig,
│   on main.tf line 94, in resource "google_compute_instance_group_manager" "pc_mig":
│   94: resource "google_compute_instance_group_manager" "pc_mig" {
│ 
╵