### 2024-10-22  20:42
---------------------


vagrant@tfbuntu:~/GCP8-pet-lab/tfinfra$ terraform apply -auto-approve -input=false

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # google_compute_autoscaler.pc_mig_autoscaler will be created
  + resource "google_compute_autoscaler" "pc_mig_autoscaler" {
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + name               = "pc-mig-autoscaler"
      + project            = "az-537298"
      + self_link          = (known after apply)
      + target             = (known after apply)
      + zone               = "us-central1-c"

      + autoscaling_policy {
          + cooldown_period = 60
          + max_replicas    = 4
          + min_replicas    = 2
          + mode            = "ON"

          + cpu_utilization {
              + predictive_method = "NONE"
              + target            = 0.8
            }
        }
    }

  # google_compute_forwarding_rule.default will be created
  + resource "google_compute_forwarding_rule" "default" {
      + all_ports             = true
      + backend_service       = (known after apply)
      + base_forwarding_rule  = (known after apply)
      + creation_timestamp    = (known after apply)
      + effective_labels      = (known after apply)
      + forwarding_rule_id    = (known after apply)
      + id                    = (known after apply)
      + ip_address            = (known after apply)
      + ip_protocol           = (known after apply)
      + ip_version            = (known after apply)
      + label_fingerprint     = (known after apply)
      + load_balancing_scheme = "EXTERNAL"
      + name                  = "petclinic-forwarding-rule"
      + network               = (known after apply)
      + network_tier          = (known after apply)
      + port_range            = (known after apply)
      + project               = "az-537298"
      + psc_connection_id     = (known after apply)
      + psc_connection_status = (known after apply)
      + recreate_closed_psc   = false
      + region                = "us-central1"
      + self_link             = (known after apply)
      + service_name          = (known after apply)
      + subnetwork            = (known after apply)
      + terraform_labels      = (known after apply)

      + service_directory_registrations (known after apply)
    }

  # google_compute_health_check.petclinic_health_check will be created
  + resource "google_compute_health_check" "petclinic_health_check" {
      + check_interval_sec  = 30
      + creation_timestamp  = (known after apply)
      + healthy_threshold   = 2
      + id                  = (known after apply)
      + name                = "petclinic-health-check"
      + project             = "az-537298"
      + self_link           = (known after apply)
      + timeout_sec         = 10
      + type                = (known after apply)
      + unhealthy_threshold = 2

      + http_health_check {
          + port         = 8080
          + proxy_header = "NONE"
          + request_path = "/health"
        }

      + log_config (known after apply)
    }

  # google_compute_instance_group_manager.pc_mig will be created
  + resource "google_compute_instance_group_manager" "pc_mig" {
      + base_instance_name             = "petclinic-server"
      + creation_timestamp             = (known after apply)
      + fingerprint                    = (known after apply)
      + id                             = (known after apply)
      + instance_group                 = (known after apply)
      + list_managed_instances_results = "PAGELESS"
      + name                           = "pc-mig"
      + operation                      = (known after apply)
      + project                        = "az-537298"
      + self_link                      = (known after apply)
      + status                         = (known after apply)
      + target_pools                   = (known after apply)
      + target_size                    = 2
      + wait_for_instances             = false
      + wait_for_instances_status      = "STABLE"
      + zone                           = "us-central1-c"

      + auto_healing_policies {
          + health_check      = (known after apply)
          + initial_delay_sec = 60
        }

      + instance_lifecycle_policy (known after apply)

      + update_policy {
          + max_surge_fixed       = 0
          + max_unavailable_fixed = 1
          + minimal_action        = "RESTART"
          + type                  = "PROACTIVE"
        }

      + version {
          + instance_template = "projects/az-537298/regions/us-central1/instanceTemplates/petclinic-template"
          + name              = "petclinic-serverv"
        }
    }

  # google_compute_network.vpc will be created
  + resource "google_compute_network" "vpc" {
      + auto_create_subnetworks                   = false
      + delete_default_routes_on_create           = false
      + gateway_ipv4                              = (known after apply)
      + id                                        = (known after apply)
      + internal_ipv6_range                       = (known after apply)
      + mtu                                       = (known after apply)
      + name                                      = "petclinic-vpc"
      + network_firewall_policy_enforcement_order = "AFTER_CLASSIC_FIREWALL"
      + numeric_id                                = (known after apply)
      + project                                   = "az-537298"
      + routing_mode                              = (known after apply)
      + self_link                                 = (known after apply)
    }

  # google_compute_region_backend_service.petclinic_backend will be created
  + resource "google_compute_region_backend_service" "petclinic_backend" {
      + connection_draining_timeout_sec = 10
      + creation_timestamp              = (known after apply)
      + fingerprint                     = (known after apply)
      + generated_id                    = (known after apply)
      + health_checks                   = (known after apply)
      + id                              = (known after apply)
      + load_balancing_scheme           = "INTERNAL"
      + name                            = "petclinic-backend"
      + port_name                       = (known after apply)
      + project                         = "az-537298"
      + protocol                        = (known after apply)
      + region                          = "us-central1"
      + self_link                       = (known after apply)
      + session_affinity                = "CLIENT_IP"
      + timeout_sec                     = (known after apply)

      + cdn_policy (known after apply)

      + iap (known after apply)

      + log_config (known after apply)
    }

  # google_compute_router.pc_router will be created
  + resource "google_compute_router" "pc_router" {
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + name               = "petclinic-router"
      + network            = (known after apply)
      + project            = "az-537298"
      + region             = "us-central1"
      + self_link          = (known after apply)
    }

  # google_compute_router_nat.pc_nat_gateway will be created
  + resource "google_compute_router_nat" "pc_nat_gateway" {
      + auto_network_tier                   = (known after apply)
      + drain_nat_ips                       = (known after apply)
      + enable_dynamic_port_allocation      = (known after apply)
      + enable_endpoint_independent_mapping = (known after apply)
      + endpoint_types                      = (known after apply)
      + icmp_idle_timeout_sec               = 30
      + id                                  = (known after apply)
      + min_ports_per_vm                    = (known after apply)
      + name                                = "pc-nat-gateway"
      + nat_ip_allocate_option              = "AUTO_ONLY"
      + nat_ips                             = (known after apply)
      + project                             = "az-537298"
      + region                              = "us-central1"
      + router                              = "petclinic-router"
      + source_subnetwork_ip_ranges_to_nat  = "ALL_SUBNETWORKS_ALL_IP_RANGES"
      + tcp_established_idle_timeout_sec    = 1200
      + tcp_time_wait_timeout_sec           = 120
      + tcp_transitory_idle_timeout_sec     = 30
      + udp_idle_timeout_sec                = 30

      + log_config {
          + enable = false
          + filter = "ERRORS_ONLY"
        }
    }

  # google_compute_subnetwork.pc_subnet will be created
  + resource "google_compute_subnetwork" "pc_subnet" {
      + creation_timestamp         = (known after apply)
      + external_ipv6_prefix       = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + internal_ipv6_prefix       = (known after apply)
      + ip_cidr_range              = "10.0.1.0/24"
      + ipv6_cidr_range            = (known after apply)
      + name                       = "pc-subnet"
      + network                    = (known after apply)
      + private_ip_google_access   = (known after apply)
      + private_ipv6_google_access = (known after apply)
      + project                    = "az-537298"
      + purpose                    = (known after apply)
      + region                     = "us-central1"
      + self_link                  = (known after apply)
      + stack_type                 = (known after apply)

      + secondary_ip_range (known after apply)
    }

  # google_compute_subnetwork.sql_subnet will be created
  + resource "google_compute_subnetwork" "sql_subnet" {
      + creation_timestamp         = (known after apply)
      + external_ipv6_prefix       = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + internal_ipv6_prefix       = (known after apply)
      + ip_cidr_range              = "10.0.2.0/24"
      + ipv6_cidr_range            = (known after apply)
      + name                       = "mysql-subnet"
      + network                    = (known after apply)
      + private_ip_google_access   = (known after apply)
      + private_ipv6_google_access = (known after apply)
      + project                    = "az-537298"
      + purpose                    = (known after apply)
      + region                     = "us-central1"
      + self_link                  = (known after apply)
      + stack_type                 = (known after apply)

      + secondary_ip_range (known after apply)
    }

  # google_compute_target_pool.pc_pool will be created
  + resource "google_compute_target_pool" "pc_pool" {
      + id               = (known after apply)
      + instances        = (known after apply)
      + name             = "petclinic-pool"
      + project          = "az-537298"
      + region           = "us-central1"
      + self_link        = (known after apply)
      + session_affinity = "NONE"
    }

  # module.database.google_compute_instance.sql_srv will be created
  + resource "google_compute_instance" "sql_srv" {
      + allow_stopping_for_update = true
      + can_ip_forward            = false
      + cpu_platform              = (known after apply)
      + current_status            = (known after apply)
      + deletion_protection       = false
      + effective_labels          = {
          + "app"                        = "petclinic"
          + "goog-terraform-provisioned" = "true"
        }
      + id                        = (known after apply)
      + instance_id               = (known after apply)
      + label_fingerprint         = (known after apply)
      + labels                    = {
          + "app" = "petclinic"
        }
      + machine_type              = "e2-micro"
      + metadata_fingerprint      = (known after apply)
      + min_cpu_platform          = (known after apply)
      + name                      = "mysql-server"
      + project                   = "az-537298"
      + self_link                 = (known after apply)
      + tags                      = [
          + "db-server",
          + "mysql-server",
          + "mysqlserver-firewall",
        ]
      + tags_fingerprint          = (known after apply)
      + terraform_labels          = {
          + "app"                        = "petclinic"
          + "goog-terraform-provisioned" = "true"
        }
      + zone                      = "us-central1-c"

      + boot_disk {
          + auto_delete                = true
          + device_name                = (known after apply)
          + disk_encryption_key_sha256 = (known after apply)
          + kms_key_self_link          = (known after apply)
          + mode                       = "READ_WRITE"
          + source                     = (known after apply)

          + initialize_params {
              + image                  = "projects/az-537298/global/images/mysqlserver-image"
              + labels                 = (known after apply)
              + provisioned_iops       = (known after apply)
              + provisioned_throughput = (known after apply)
              + size                   = 10
              + type                   = "pd-standard"
            }
        }

      + confidential_instance_config (known after apply)

      + guest_accelerator (known after apply)

      + network_interface {
          + internal_ipv6_prefix_length = (known after apply)
          + ipv6_access_type            = (known after apply)
          + ipv6_address                = (known after apply)
          + name                        = (known after apply)
          + network                     = (known after apply)
          + network_ip                  = (known after apply)
          + stack_type                  = (known after apply)
          + subnetwork                  = (known after apply)
          + subnetwork_project          = (known after apply)
        }

      + reservation_affinity (known after apply)

      + scheduling (known after apply)

      + service_account {
          + email  = "azrubael@az-537298.iam.gserviceaccount.com"
          + scopes = [
              + "https://www.googleapis.com/auth/devstorage.read_only",
              + "https://www.googleapis.com/auth/logging.write",
              + "https://www.googleapis.com/auth/monitoring.write",
              + "https://www.googleapis.com/auth/service.management.readonly",
              + "https://www.googleapis.com/auth/servicecontrol",
              + "https://www.googleapis.com/auth/trace.append",
            ]
        }

      + shielded_instance_config {
          + enable_integrity_monitoring = true
          + enable_secure_boot          = false
          + enable_vtpm                 = true
        }
    }

  # module.firewall.google_compute_firewall.allow_mysql_from_petclinic will be created
  + resource "google_compute_firewall" "allow_mysql_from_petclinic" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "allow-mysql-from-petclinic"
      + network            = (known after apply)
      + priority           = 1000
      + project            = "az-537298"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "10.0.1.0/24",
        ]
      + target_tags        = [
          + "mysqlserver-firewall",
        ]

      + allow {
          + ports    = [
              + "3306",
            ]
          + protocol = "tcp"
        }
    }

  # module.firewall.google_compute_firewall.allow_petclinic_from_internet will be created
  + resource "google_compute_firewall" "allow_petclinic_from_internet" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "allow-petclinic-from-internet"
      + network            = (known after apply)
      + priority           = 1000
      + project            = "az-537298"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]
      + target_tags        = [
          + "petclinic-firewall",
        ]

      + allow {
          + ports    = [
              + "8080",
            ]
          + protocol = "tcp"
        }
    }

  # module.firewall.google_compute_firewall.allow_ssh_from_internet will be created
  + resource "google_compute_firewall" "allow_ssh_from_internet" {
      + creation_timestamp = (known after apply)
      + destination_ranges = (known after apply)
      + direction          = (known after apply)
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "allow-ssh-from-internet"
      + network            = (known after apply)
      + priority           = 1000
      + project            = "az-537298"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]
      + target_tags        = [
          + "mysqlserver-firewall",
          + "petclinic-firewall",
        ]

      + allow {
          + ports    = [
              + "22",
            ]
          + protocol = "tcp"
        }
      + allow {
          + ports    = []
          + protocol = "icmp"
        }
    }

Plan: 15 to add, 0 to change, 0 to destroy.
google_compute_target_pool.pc_pool: Creating...
google_compute_network.vpc: Creating...
google_compute_health_check.petclinic_health_check: Creating...
google_compute_target_pool.pc_pool: Still creating... [10s elapsed]
google_compute_health_check.petclinic_health_check: Still creating... [11s elapsed]
google_compute_network.vpc: Still creating... [11s elapsed]
google_compute_health_check.petclinic_health_check: Creation complete after 12s [id=projects/az-537298/global/healthChecks/petclinic-health-check]
google_compute_region_backend_service.petclinic_backend: Creating...
google_compute_target_pool.pc_pool: Creation complete after 14s [id=projects/az-537298/regions/us-central1/targetPools/petclinic-pool]
google_compute_network.vpc: Still creating... [21s elapsed]
google_compute_region_backend_service.petclinic_backend: Still creating... [10s elapsed]
google_compute_network.vpc: Creation complete after 23s [id=projects/az-537298/global/networks/petclinic-vpc]
google_compute_subnetwork.sql_subnet: Creating...
module.firewall.google_compute_firewall.allow_petclinic_from_internet: Creating...
module.firewall.google_compute_firewall.allow_mysql_from_petclinic: Creating...
module.firewall.google_compute_firewall.allow_ssh_from_internet: Creating...
google_compute_subnetwork.pc_subnet: Creating...
google_compute_region_backend_service.petclinic_backend: Creation complete after 14s [id=projects/az-537298/regions/us-central1/backendServices/petclinic-backend]
google_compute_subnetwork.sql_subnet: Still creating... [10s elapsed]
module.firewall.google_compute_firewall.allow_mysql_from_petclinic: Still creating... [10s elapsed]
module.firewall.google_compute_firewall.allow_petclinic_from_internet: Still creating... [10s elapsed]
module.firewall.google_compute_firewall.allow_ssh_from_internet: Still creating... [10s elapsed]
google_compute_subnetwork.pc_subnet: Still creating... [10s elapsed]
module.firewall.google_compute_firewall.allow_ssh_from_internet: Creation complete after 12s [id=projects/az-537298/global/firewalls/allow-ssh-from-internet]
module.firewall.google_compute_firewall.allow_mysql_from_petclinic: Creation complete after 12s [id=projects/az-537298/global/firewalls/allow-mysql-from-petclinic]
module.firewall.google_compute_firewall.allow_petclinic_from_internet: Creation complete after 12s [id=projects/az-537298/global/firewalls/allow-petclinic-from-internet]
google_compute_subnetwork.pc_subnet: Creation complete after 13s [id=projects/az-537298/regions/us-central1/subnetworks/pc-subnet]
google_compute_router.pc_router: Creating...
google_compute_forwarding_rule.default: Creating...
google_compute_instance_group_manager.pc_mig: Creating...
google_compute_subnetwork.sql_subnet: Still creating... [20s elapsed]
google_compute_subnetwork.sql_subnet: Creation complete after 23s [id=projects/az-537298/regions/us-central1/subnetworks/mysql-subnet]
google_compute_router.pc_router: Still creating... [10s elapsed]
google_compute_instance_group_manager.pc_mig: Still creating... [10s elapsed]
module.database.google_compute_instance.sql_srv: Creating...
google_compute_router.pc_router: Creation complete after 12s [id=projects/az-537298/regions/us-central1/routers/petclinic-router]
google_compute_router_nat.pc_nat_gateway: Creating...
module.database.google_compute_instance.sql_srv: Still creating... [10s elapsed]
google_compute_instance_group_manager.pc_mig: Still creating... [20s elapsed]
google_compute_router_nat.pc_nat_gateway: Still creating... [10s elapsed]
google_compute_router_nat.pc_nat_gateway: Creation complete after 14s [id=az-537298/us-central1/petclinic-router/pc-nat-gateway]
google_compute_instance_group_manager.pc_mig: Still creating... [30s elapsed]
module.database.google_compute_instance.sql_srv: Still creating... [20s elapsed]
google_compute_instance_group_manager.pc_mig: Still creating... [40s elapsed]
module.database.google_compute_instance.sql_srv: Still creating... [30s elapsed]
google_compute_instance_group_manager.pc_mig: Creation complete after 44s [id=projects/az-537298/zones/us-central1-c/instanceGroupManagers/pc-mig]
google_compute_autoscaler.pc_mig_autoscaler: Creating...
module.database.google_compute_instance.sql_srv: Creation complete after 35s [id=projects/az-537298/zones/us-central1-c/instances/mysql-server]
google_compute_autoscaler.pc_mig_autoscaler: Creation complete after 2s [id=projects/az-537298/zones/us-central1-c/autoscalers/pc-mig-autoscaler]
╷
│ Error: Error creating ForwardingRule: googleapi: Error 400: Invalid value for field 'resource.backendService': 'https://compute.googleapis.com/compute/beta/projects/az-537298/regions/us-central1/backendServices/petclinic-backend'. Load balancing scheme EXTERNAL does not match the backend service load balancing scheme INTERNAL., invalid
│ 
│   with google_compute_forwarding_rule.default,
│   on main.tf line 72, in resource "google_compute_forwarding_rule" "default":
│   72: resource "google_compute_forwarding_rule" "default" {
│ 
╵
